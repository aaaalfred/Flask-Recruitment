// ===================================
// SCRIPT DE DIAGN√ìSTICO PARA CONSOLA DEL NAVEGADOR
// ===================================
// Copiar y pegar este c√≥digo en la consola del navegador (F12)
// cuando est√©s en la p√°gina del dashboard

console.log('üöÄ INICIANDO DIAGN√ìSTICO DEL DASHBOARD');

// 1. Verificar configuraci√≥n de la API
const API_BASE_URL = 'http://localhost:5000/api';
console.log('üîó API Base URL:', API_BASE_URL);

// 2. Verificar token en localStorage
const token = localStorage.getItem('authToken');
const userInfo = localStorage.getItem('userInfo');

console.log('üîê Token en localStorage:', token ? `${token.substr(0, 50)}...` : 'NO ENCONTRADO');
console.log('üë§ User info:', userInfo ? JSON.parse(userInfo) : 'NO ENCONTRADO');

if (!token) {
    console.error('‚ùå PROBLEMA: No hay token de autenticaci√≥n guardado');
    console.log('üí° SOLUCI√ìN: Hacer login nuevamente');
} else {
    console.log('‚úÖ Token encontrado, procediendo con las pruebas...');
}

// 3. Test de conectividad b√°sica
async function testHealth() {
    try {
        console.log('üîç Probando conectividad b√°sica...');
        const response = await fetch(`${API_BASE_URL}/health`);
        const data = await response.json();
        console.log('‚úÖ Health check exitoso:', data);
        return true;
    } catch (error) {
        console.error('‚ùå Error en health check:', error);
        console.log('üí° SOLUCI√ìN: Verificar que el backend est√© corriendo en localhost:5000');
        return false;
    }
}

// 4. Test del endpoint de dashboard espec√≠fico
async function testDashboard() {
    if (!token) {
        console.error('‚ùå No se puede probar dashboard sin token');
        return;
    }
    
    try {
        console.log('üîç Probando endpoint del dashboard...');
        
        const response = await fetch(`${API_BASE_URL}/reports/dashboard`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('üì° Response status:', response.status);
        console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Dashboard data recibida exitosamente:');
            console.table({
                'Total Vacantes': data.total_vacantes,
                'Vacantes Abiertas': data.vacantes_abiertas,
                'Total Candidatos': data.total_candidatos,
                'Entrevistas Pendientes': data.entrevistas_pendientes,
                'Usuario': data.usuario_nombre,
                'Rol': data.tipo_usuario
            });
            
            console.log('üìä Datos completos:', data);
            return data;
        } else {
            const errorData = await response.text();
            console.error('‚ùå Error en dashboard:', response.status, errorData);
            
            if (response.status === 401) {
                console.log('üí° SOLUCI√ìN: Token inv√°lido, hacer login nuevamente');
            } else if (response.status === 500) {
                console.log('üí° SOLUCI√ìN: Error del servidor, revisar logs del backend');
            }
        }
    } catch (error) {
        console.error('‚ùå Error de red o CORS:', error);
        console.log('üí° SOLUCI√ìN: Verificar CORS y conectividad');
    }
}

// 5. Test del servicio reportService directamente
async function testReportService() {
    // Solo funciona si estamos en la p√°gina de React
    if (typeof window.reportService !== 'undefined') {
        try {
            console.log('üîç Probando reportService directamente...');
            const data = await window.reportService.getDashboardStats();
            console.log('‚úÖ reportService funciona:', data);
        } catch (error) {
            console.error('‚ùå Error en reportService:', error);
        }
    } else {
        console.log('‚ÑπÔ∏è reportService no disponible (normal si no est√°s en React)');
    }
}

// 6. Verificar estado de React y componentes
function checkReactState() {
    // Solo funciona en la p√°gina de React
    if (typeof React !== 'undefined') {
        console.log('‚úÖ React est√° cargado');
        
        // Buscar el componente Dashboard en el DOM
        const dashboardElement = document.querySelector('[class*="dashboard"], [class*="Dashboard"]');
        if (dashboardElement) {
            console.log('‚úÖ Elemento Dashboard encontrado en DOM');
        } else {
            console.log('‚ö†Ô∏è Elemento Dashboard no encontrado en DOM');
        }
    } else {
        console.log('‚ÑπÔ∏è React no detectado (normal si no est√°s en la p√°gina React)');
    }
}

// 7. Ejecutar todas las pruebas
async function runAllTests() {
    console.log('\nüß™ EJECUTANDO TODAS LAS PRUEBAS...\n');
    
    await testHealth();
    console.log('\n' + '='.repeat(50) + '\n');
    
    await testDashboard();
    console.log('\n' + '='.repeat(50) + '\n');
    
    await testReportService();
    console.log('\n' + '='.repeat(50) + '\n');
    
    checkReactState();
    console.log('\n' + '='.repeat(50) + '\n');
    
    console.log('üèÅ DIAGN√ìSTICO COMPLETADO');
    console.log('üí° Si todos los tests pasan pero el dashboard muestra 0:');
    console.log('   1. Revisar que el estado del componente React se actualice');
    console.log('   2. Verificar errores en la consola de React');
    console.log('   3. Comprobar que el useEffect se ejecute correctamente');
}

// Ejecutar autom√°ticamente
runAllTests();

// Tambi√©n exportar las funciones para uso manual
window.dashboardDiagnostic = {
    testHealth,
    testDashboard,
    testReportService,
    checkReactState,
    runAllTests
};

console.log('üìã Funciones disponibles: window.dashboardDiagnostic');
